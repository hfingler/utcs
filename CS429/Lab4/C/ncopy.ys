#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Caio Lente (ctl684)
#
# Description: to optimize ncopy.ys, the instruction iaddq was used
# to substitute irmovq + addq, the main loop was unrolled at 6x1,
# and register dependencies were minimized.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion

HeaderA:
	xorq %rax, %rax            # count = 0;
	iaddq $-6, %rdx            # len -= 6
	jle HeaderB                # if len <= 0, goto HeaderB:
LoopA:
	mrmovq (%rdi), %r8         # read val1 from src...
	mrmovq 8(%rdi), %r9        # read val2 from src...
	mrmovq 16(%rdi), %r10      # read val3 from src...
	mrmovq 24(%rdi), %r11      # read val4 from src...
	mrmovq 32(%rdi), %r12      # read val5 from src...
	mrmovq 40(%rdi), %r13      # read val6 from src...
	rmmovq %r8, (%rsi)         # ...and store it to dst
	rmmovq %r9, 8(%rsi)        # ...and store it to dst
	rmmovq %r10, 16(%rsi)      # ...and store it to dst
	rmmovq %r11, 24(%rsi)      # ...and store it to dst
	rmmovq %r12, 32(%rsi)      # ...and store it to dst
	rmmovq %r13, 40(%rsi)      # ...and store it to dst
Val1:
	andq %r8, %r8              # val <= 0?
	jle Val2                   # if so, goto Val2:
	iaddq $1, %rax             # count++
Val2:
	andq %r9, %r9              # val <= 0?
	jle Val3                   # if so, goto Val3:
	iaddq $1, %rax             # count++
Val3:
	andq %r10, %r10            # val <= 0?
	jle Val4                   # if so, goto Val4:
	iaddq $1, %rax             # count++
Val4:
	andq %r11, %r11            # val <= 0?
	jle Val5                   # if so, goto Val5:
	iaddq $1, %rax             # count++
Val5:
	andq %r12, %r12            # val <= 0?
	jle Val6                   # if so, goto Val6:
	iaddq $1, %rax             # count++
Val6:
	andq %r13, %r13            # val <= 0?
	jle NposA                  # if so, goto NposA:
	iaddq $1, %rax             # count++
NposA:
	iaddq $48, %rdi            # src += 6
	iaddq $48, %rsi            # dst += 6
	iaddq $-6, %rdx            # len -= 6
	jg LoopA                   # if len > 0, goto LoopA:

HeaderB:
	iaddq $6, %rdx             # len += 6
	je Done                    # if len = 0, goto Done:
LoopB:
	mrmovq (%rdi), %r10        # read val from src...
	rmmovq %r10, (%rsi)        # ...and store it to dst
	andq %r10, %r10            # val <= 0?
	jle NposB                  # if so, goto NposB:
	iaddq $1, %rax             # count++
NposB:
	iaddq $8, %rdi             # src++
	iaddq $8, %rsi             # dst++
	iaddq $-1, %rdx            # len--
	jg LoopB                   # if len > 0, goto LoopB:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
